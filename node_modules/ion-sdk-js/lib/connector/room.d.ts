/// <reference types="node" />
import { grpc } from '@improbable-eng/grpc-web';
import { Service, Connector } from './ion';
import * as room from '../_library/apps/room/proto/room_pb';
import { EventEmitter } from 'events';
/**
 * PeerState: The state of a peer
 */
export declare enum PeerState {
    NONE = 0,
    JOIN = 1,
    UPDATE = 2,
    LEAVE = 3
}
/**
 * Role: Role of the peer
 */
export declare enum Role {
    HOST = 0,
    GUEST = 1
}
/**
 * Protocol: The protocol of the peer
 */
export declare enum Protocol {
    PROTOCOLUNKNOWN = 0,
    WEBRTC = 1,
    SIP = 2,
    RTMP = 3,
    RTSP = 4
}
/**
 * ErrorType: The type of error
 */
export declare enum ErrorType {
    NONE = 0,
    UNKOWNERROR = 1,
    PERMISSIONDENIED = 2,
    SERVICEUNAVAILABLE = 3,
    ROOMLOCKED = 4,
    PASSWORDREQUIRED = 5,
    ROOMALREADYEXIST = 6,
    ROOMNOTEXIST = 7,
    INVALIDPARAMS = 8,
    PEERALREADYEXIST = 9,
    PEERNOTEXIST = 10
}
/**
 * Error: The error
 */
export interface Error {
    errType: ErrorType;
    reason: string;
}
/**
 * JoinResult: The result of join
 */
export interface JoinResult {
    success: boolean;
    error: Error;
    role: Role;
    room: RoomInfo;
}
/**
 * Direction: The direction of the stream
 */
export declare enum Direction {
    INCOMING = 0,
    OUTGOING = 1,
    BILATERAL = 2
}
/**
 * Peer: The peer interface
 */
export interface Peer {
    sid: string;
    uid: string;
    displayname: string;
    extrainfo: Uint8Array | string;
    destination: string;
    role: Role;
    protocol: Protocol;
    avatar: string;
    direction: Direction;
    vendor: string;
}
/**
 * PeerEvent: The event of peer
 */
export interface PeerEvent {
    state: PeerState;
    peer: Peer;
}
/**
 * Message: The message interface
 */
export interface Message {
    from: string;
    to: string;
    type: string;
    payload: any;
}
/**
 * RoomInfo: The room info interface
 */
export interface RoomInfo {
    sid: string;
    name: string;
    lock: boolean;
    password: string;
    description: string;
    maxpeers: number;
}
/**
 * Disconnect: The disconnect interface
 */
export interface Disconnect {
    sid: string;
    reason: string;
}
/**
 * Room: The room class
 */
export declare class Room implements Service {
    name: string;
    connector: Connector;
    connected: boolean;
    onerror?: (err: Event) => void;
    onjoin?: (result: JoinResult) => void;
    onleave?: (reason: string) => void;
    onpeerevent?: (ev: PeerEvent) => void;
    onmessage?: (msg: Message) => void;
    onroominfo?: (info: RoomInfo) => void;
    ondisconnect?: (dis: Disconnect) => void;
    constructor(connector: Connector);
    join(peer: Peer, password: string | undefined): Promise<JoinResult | undefined>;
    leave(sid: string, uid: string): Promise<string | undefined>;
    message(sid: string, from: string, to: string, mineType: string, data: Map<string, any>): Promise<void>;
    connect(): void;
    close(): void;
    _rpc?: RoomGRPCClient;
}
/**
 * RoomGRPCClient: The room grpc client
 */
declare class RoomGRPCClient extends EventEmitter {
    connector: Connector;
    protected _client: grpc.Client<room.Request, room.Reply>;
    constructor(service: Service, connector: Connector);
    /**
     * join a session/room
     * @date 2021-11-03
     * @param {any} peer:Peer
     * @param {any} password:string|undefined
     * @returns {any}
     */
    join(peer: Peer, password: string | undefined): Promise<JoinResult>;
    /**
     * leave a session/room
     * @date 2021-11-03
     * @param {any} sid:string
     * @param {any} uid:string
     * @returns
     */
    leave(sid: string, uid: string): Promise<string>;
    mapToObj(map: Map<string, any>): {
        [key: string]: any;
    };
    /**
     * send a message to a session/room
     * @date 2021-11-03
     * @param {any} sid:string
     * @param {any} from:string
     * @param {any} to:string
     * @param {any} mineType:string
     * @param {any} data:Map<string
     * @param {any} any>
     * @returns
     */
    sendMessage(sid: string, from: string, to: string, mineType: string, data: Map<string, any>): Promise<void>;
    /**
     * close client
     * @date 2021-11-03
     * @returns
     */
    close(): void;
}
export {};
