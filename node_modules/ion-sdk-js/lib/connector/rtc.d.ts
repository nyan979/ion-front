import { grpc } from '@improbable-eng/grpc-web';
import { Service, Connector } from './ion';
import { Configuration } from '../client';
import * as pb from '../_library/proto/rtc/rtc_pb';
import { LocalStream, RemoteStream } from '../stream';
/**
 * TrackState: track state
 */
export declare enum TrackState {
    ADD = 0,
    UPDATE = 1,
    REMOVE = 2
}
/**
 * TrackEvent: track event
 */
export interface TrackEvent {
    state: TrackState;
    uid: string;
    tracks: TrackInfo[];
}
/**
 * MediaType: media type
 */
export declare enum MediaType {
    MEDIAUNKNOWN = 0,
    USERMEDIA = 1,
    SCREENCAPTURE = 2,
    CAVANS = 3,
    STREAMING = 4,
    VOIP = 5
}
/**
 * TrackInfo: track info
 */
export interface TrackInfo {
    id: string;
    kind: string;
    muted: boolean;
    type: MediaType;
    stream_id: string;
    label: string;
    layer: string;
    width: number;
    height: number;
    frame_rate: number;
}
/**
 * Subscription: subscription
 */
export interface Subscription {
    track_id: string;
    muted: boolean;
    subscribe: boolean;
    layer: string;
}
/**
 * JoinConfig: join config
 */
export interface JoinConfig {
    no_publish: boolean;
    no_subscribe: boolean;
    no_auto_subscribe: boolean;
}
/**
 * Error: error interface
 */
export interface Error {
    code: number;
    reason: string;
}
/**
 * Result: result interface
 */
export interface Result {
    success: boolean;
    error: Error | undefined;
}
/**
 * RTC: rtc class
 */
export declare class RTC implements Service {
    name: string;
    connector: Connector;
    connected: boolean;
    config?: Configuration;
    protected _rpc?: grpc.Client<pb.Request, pb.Reply>;
    private _rtc?;
    private _sig?;
    ontrack?: (track: MediaStreamTrack, stream: RemoteStream) => void;
    ondatachannel?: (ev: RTCDataChannelEvent) => void;
    onspeaker?: (ev: string[]) => void;
    ontrackevent?: (ev: TrackEvent) => void;
    /**
     * constructor
     * @date 2021-11-03
     * @param {any} connector:Connector
     * @param {any} config?:Configuration
     * @returns
     */
    constructor(connector: Connector, config?: Configuration);
    /**
     * join rtc session
     * @date 2021-11-03
     * @param {any} sid:string
     * @param {any} uid:string
     * @param {any} config:JoinConfig|undefined
     * @returns
     */
    join(sid: string, uid: string, config: JoinConfig | undefined): Promise<void | undefined>;
    /**
     * leave session
     * @date 2021-11-03
     * @returns
     */
    leave(): void | undefined;
    /**
     * get pub stats
     * @date 2021-11-03
     * @param {any} selector?:MediaStreamTrack
     * @returns {any}
     */
    getPubStats(selector?: MediaStreamTrack): Promise<RTCStatsReport> | undefined;
    /**
     * get sub stats
     * @date 2021-11-03
     * @param {any} selector?:MediaStreamTrack
     * @returns {any}
     */
    getSubStats(selector?: MediaStreamTrack): Promise<RTCStatsReport> | undefined;
    /**
     * publish local stream
     * @date 2021-11-03
     * @param {any} stream:LocalStream
     * @returns {any}
     */
    publish(stream: LocalStream): void;
    /**
     * subscribe
     * @date 2021-11-03
     * @param {any} trackInfos:Subscription[]
     * @returns {any}
     */
    subscribe(trackInfos: Subscription[]): Promise<Result> | undefined;
    /**
     * createDataChannel
     * @date 2021-11-03
     * @param {any} label:string
     * @returns {any}
     */
    createDataChannel(label: string): RTCDataChannel | undefined;
    /**
     * connect to signal
     * @date 2021-11-03
     * @returns {any}
     */
    connect(): void;
    /**
     * close rtc
     * @date 2021-11-03
     * @returns {any}
     */
    close(): void;
}
