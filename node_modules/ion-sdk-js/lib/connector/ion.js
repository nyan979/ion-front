"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connector = void 0;
const grpc_web_1 = require("@improbable-eng/grpc-web");
/**
 * Connector class
 * support multiple services
 */
class Connector {
    constructor(uri, token) {
        this.uri = uri;
        this.metadata = new grpc_web_1.grpc.Metadata();
        this.services = new Map();
        if (token) {
            this.metadata.append('authorization', token);
        }
    }
    grpcClientRpcOptions() {
        return {
            host: this.uri,
            transport: grpc_web_1.grpc.WebsocketTransport(),
        };
    }
    close() {
        this.services.forEach((service) => {
            if (service.connected) {
                service.close();
            }
        });
    }
    onHeaders(service, headers) {
        var _a;
        // Merge metadata.
        headers.forEach((key, value) => {
            if (key.toLowerCase() !== 'trailer' && key.toLowerCase() !== 'content-type') {
                this.metadata.append(key, value);
            }
        });
        service.connected = true;
        (_a = this.onopen) === null || _a === void 0 ? void 0 : _a.call(this, service);
    }
    onEnd(service, status, statusMessage, trailers) {
        var _a;
        service.connected = false;
        (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this, service, new CustomEvent(service.name, { detail: { status, statusMessage, trailers } }));
    }
    /**
     * register service to connector
     * @date 2021-11-03
     * @param {any} service:Service
     * @returns {any}
     */
    registerService(service) {
        this.services.set(service.name, service);
    }
}
exports.Connector = Connector;
