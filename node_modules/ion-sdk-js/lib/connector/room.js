"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Room = exports.Direction = exports.ErrorType = exports.Protocol = exports.Role = exports.PeerState = void 0;
const grpc_web_1 = require("@improbable-eng/grpc-web");
const room = require("../_library/apps/room/proto/room_pb");
const room_rpc = require("../_library/apps/room/proto/room_pb_service");
const events_1 = require("events");
/**
 * PeerState: The state of a peer
 */
var PeerState;
(function (PeerState) {
    PeerState[PeerState["NONE"] = 0] = "NONE";
    PeerState[PeerState["JOIN"] = 1] = "JOIN";
    PeerState[PeerState["UPDATE"] = 2] = "UPDATE";
    PeerState[PeerState["LEAVE"] = 3] = "LEAVE";
})(PeerState = exports.PeerState || (exports.PeerState = {}));
/**
 * Role: Role of the peer
 */
var Role;
(function (Role) {
    Role[Role["HOST"] = 0] = "HOST";
    Role[Role["GUEST"] = 1] = "GUEST";
})(Role = exports.Role || (exports.Role = {}));
/**
 * Protocol: The protocol of the peer
 */
var Protocol;
(function (Protocol) {
    Protocol[Protocol["PROTOCOLUNKNOWN"] = 0] = "PROTOCOLUNKNOWN";
    Protocol[Protocol["WEBRTC"] = 1] = "WEBRTC";
    Protocol[Protocol["SIP"] = 2] = "SIP";
    Protocol[Protocol["RTMP"] = 3] = "RTMP";
    Protocol[Protocol["RTSP"] = 4] = "RTSP";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
/**
 * ErrorType: The type of error
 */
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["NONE"] = 0] = "NONE";
    ErrorType[ErrorType["UNKOWNERROR"] = 1] = "UNKOWNERROR";
    ErrorType[ErrorType["PERMISSIONDENIED"] = 2] = "PERMISSIONDENIED";
    ErrorType[ErrorType["SERVICEUNAVAILABLE"] = 3] = "SERVICEUNAVAILABLE";
    ErrorType[ErrorType["ROOMLOCKED"] = 4] = "ROOMLOCKED";
    ErrorType[ErrorType["PASSWORDREQUIRED"] = 5] = "PASSWORDREQUIRED";
    ErrorType[ErrorType["ROOMALREADYEXIST"] = 6] = "ROOMALREADYEXIST";
    ErrorType[ErrorType["ROOMNOTEXIST"] = 7] = "ROOMNOTEXIST";
    ErrorType[ErrorType["INVALIDPARAMS"] = 8] = "INVALIDPARAMS";
    ErrorType[ErrorType["PEERALREADYEXIST"] = 9] = "PEERALREADYEXIST";
    ErrorType[ErrorType["PEERNOTEXIST"] = 10] = "PEERNOTEXIST";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
/**
 * Direction: The direction of the stream
 */
var Direction;
(function (Direction) {
    Direction[Direction["INCOMING"] = 0] = "INCOMING";
    Direction[Direction["OUTGOING"] = 1] = "OUTGOING";
    Direction[Direction["BILATERAL"] = 2] = "BILATERAL";
})(Direction = exports.Direction || (exports.Direction = {}));
/**
 * Room: The room class
 */
class Room {
    constructor(connector) {
        this.name = 'room';
        this.connected = false;
        this.connector = connector;
        this.connector.registerService(this);
        this.connect();
    }
    async join(peer, password) {
        var _a;
        return (_a = this._rpc) === null || _a === void 0 ? void 0 : _a.join(peer, password);
    }
    async leave(sid, uid) {
        var _a;
        return (_a = this._rpc) === null || _a === void 0 ? void 0 : _a.leave(sid, uid);
    }
    async message(sid, from, to, mineType, data) {
        var _a;
        return (_a = this._rpc) === null || _a === void 0 ? void 0 : _a.sendMessage(sid, from, to, mineType, data);
    }
    connect() {
        if (!this._rpc) {
            this._rpc = new RoomGRPCClient(this, this.connector);
            this._rpc.on('join-reply', (result) => {
                var _a;
                (_a = this.onjoin) === null || _a === void 0 ? void 0 : _a.call(this, result);
            });
            this._rpc.on('leave-reply', (reason) => { var _a; return (_a = this.onleave) === null || _a === void 0 ? void 0 : _a.call(this, reason); });
            this._rpc.on('peer-event', (ev) => { var _a; return (_a = this.onpeerevent) === null || _a === void 0 ? void 0 : _a.call(this, ev); });
            this._rpc.on('message', (msg) => { var _a; return (_a = this.onmessage) === null || _a === void 0 ? void 0 : _a.call(this, msg); });
            this._rpc.on('room-info', (info) => { var _a; return (_a = this.onroominfo) === null || _a === void 0 ? void 0 : _a.call(this, info); });
            this._rpc.on('disconnect', (dis) => { var _a; return (_a = this.ondisconnect) === null || _a === void 0 ? void 0 : _a.call(this, dis); });
        }
    }
    close() {
        if (this._rpc) {
            this._rpc.close();
        }
    }
}
exports.Room = Room;
/**
 * RoomGRPCClient: The room grpc client
 */
class RoomGRPCClient extends events_1.EventEmitter {
    constructor(service, connector) {
        super();
        this.connector = connector;
        const client = grpc_web_1.grpc.client(room_rpc.RoomSignal.Signal, connector.grpcClientRpcOptions());
        client.onEnd((status, statusMessage, trailers) => connector.onEnd(service, status, statusMessage, trailers));
        client.onHeaders((headers) => connector.onHeaders(service, headers));
        client.onMessage((reply) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
            switch (reply.getPayloadCase()) {
                case room.Reply.PayloadCase.JOIN:
                    this.emit('join-reply', {
                        success: ((_a = reply.getJoin()) === null || _a === void 0 ? void 0 : _a.getSuccess()) || false,
                        error: ((_b = reply.getJoin()) === null || _b === void 0 ? void 0 : _b.getError()) || { errType: ErrorType.NONE, reason: '' },
                        role: ((_c = reply.getJoin()) === null || _c === void 0 ? void 0 : _c.getRole()) || Role.HOST,
                        room: reply.getJoin()
                            ? {
                                sid: ((_e = (_d = reply.getJoin()) === null || _d === void 0 ? void 0 : _d.getRoom()) === null || _e === void 0 ? void 0 : _e.getSid()) || '',
                                name: ((_g = (_f = reply.getJoin()) === null || _f === void 0 ? void 0 : _f.getRoom()) === null || _g === void 0 ? void 0 : _g.getName()) || '',
                                lock: ((_j = (_h = reply.getJoin()) === null || _h === void 0 ? void 0 : _h.getRoom()) === null || _j === void 0 ? void 0 : _j.getLock()) || false,
                                password: ((_l = (_k = reply.getJoin()) === null || _k === void 0 ? void 0 : _k.getRoom()) === null || _l === void 0 ? void 0 : _l.getPassword()) || '',
                                description: ((_o = (_m = reply.getJoin()) === null || _m === void 0 ? void 0 : _m.getRoom()) === null || _o === void 0 ? void 0 : _o.getDescription()) || '',
                                maxpeers: ((_q = (_p = reply.getJoin()) === null || _p === void 0 ? void 0 : _p.getRoom()) === null || _q === void 0 ? void 0 : _q.getMaxpeers()) || 0,
                            }
                            : undefined,
                    });
                    break;
                case room.Reply.PayloadCase.LEAVE:
                    const reason = ((_s = (_r = reply.getLeave()) === null || _r === void 0 ? void 0 : _r.getError()) === null || _s === void 0 ? void 0 : _s.getReason()) || 'unkown reason';
                    this.emit('leave-reply', reason);
                    break;
                case room.Reply.PayloadCase.PEER:
                    const evt = reply.getPeer();
                    let state = PeerState.NONE;
                    switch (evt === null || evt === void 0 ? void 0 : evt.getState()) {
                        case room.PeerState.JOIN:
                            state = PeerState.JOIN;
                            break;
                        case room.PeerState.UPDATE:
                            state = PeerState.UPDATE;
                            break;
                        case room.PeerState.LEAVE:
                            state = PeerState.LEAVE;
                            break;
                    }
                    const peer = {
                        uid: ((_t = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _t === void 0 ? void 0 : _t.getUid()) || '',
                        sid: ((_u = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _u === void 0 ? void 0 : _u.getSid()) || '',
                        displayname: ((_v = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _v === void 0 ? void 0 : _v.getDisplayname()) || '',
                        extrainfo: ((_w = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _w === void 0 ? void 0 : _w.getExtrainfo()) || '',
                        destination: ((_x = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _x === void 0 ? void 0 : _x.getDestination()) || '',
                        role: ((_y = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _y === void 0 ? void 0 : _y.getRole()) || '',
                        protocol: ((_z = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _z === void 0 ? void 0 : _z.getProtocol()) || '',
                        avatar: ((_0 = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _0 === void 0 ? void 0 : _0.getAvatar()) || '',
                        direction: ((_1 = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _1 === void 0 ? void 0 : _1.getDirection()) || '',
                        vendor: ((_2 = evt === null || evt === void 0 ? void 0 : evt.getPeer()) === null || _2 === void 0 ? void 0 : _2.getVendor()) || '',
                    };
                    this.emit('peer-event', { state, peer });
                    break;
                case room.Reply.PayloadCase.MESSAGE:
                    const msg = reply.getMessage();
                    this.emit('message', {
                        from: (msg === null || msg === void 0 ? void 0 : msg.getFrom()) || '',
                        to: (msg === null || msg === void 0 ? void 0 : msg.getTo()) || '',
                        type: (msg === null || msg === void 0 ? void 0 : msg.getType()) || '',
                        data: (msg === null || msg === void 0 ? void 0 : msg.getPayload()) || {},
                    });
                    break;
                case room.Reply.PayloadCase.ROOM:
                    const info = reply.getRoom() || undefined;
                    this.emit('room-info', {
                        sid: (info === null || info === void 0 ? void 0 : info.getSid()) || '',
                        name: (info === null || info === void 0 ? void 0 : info.getName()) || '',
                        lock: (info === null || info === void 0 ? void 0 : info.getLock()) || false,
                        password: (info === null || info === void 0 ? void 0 : info.getPassword()) || '',
                        description: (info === null || info === void 0 ? void 0 : info.getDescription()) || '',
                        maxpeers: (info === null || info === void 0 ? void 0 : info.getMaxpeers()) || 0,
                    });
                    break;
                case room.Reply.PayloadCase.DISCONNECT:
                    const dis = reply.getDisconnect() || {};
                    this.emit('disconnect', dis);
                    break;
            }
        });
        this._client = client;
        this._client.start(connector.metadata);
    }
    /**
     * join a session/room
     * @date 2021-11-03
     * @param {any} peer:Peer
     * @param {any} password:string|undefined
     * @returns {any}
     */
    async join(peer, password) {
        const request = new room.Request();
        const join = new room.JoinRequest();
        const p = new room.Peer();
        p.setUid(peer.uid);
        p.setSid(peer.sid);
        p.setDisplayname(peer.displayname);
        p.setExtrainfo(peer.extrainfo);
        p.setDestination(peer.destination);
        p.setRole(peer.role);
        p.setProtocol(peer.protocol);
        p.setAvatar(peer.avatar);
        p.setDirection(peer.direction);
        p.setVendor(peer.vendor);
        join.setPeer(p);
        if (password) {
            join.setPassword(password);
        }
        request.setJoin(join);
        this._client.send(request);
        return new Promise((resolve, reject) => {
            const handler = (result) => {
                resolve(result);
                this.removeListener('join-reply', handler);
            };
            this.addListener('join-reply', handler);
        });
    }
    /**
     * leave a session/room
     * @date 2021-11-03
     * @param {any} sid:string
     * @param {any} uid:string
     * @returns
     */
    async leave(sid, uid) {
        const request = new room.Request();
        const leave = new room.LeaveRequest();
        leave.setSid(sid);
        leave.setUid(uid);
        request.setLeave(leave);
        this._client.send(request);
        return new Promise((resolve, reject) => {
            const handler = (reason) => {
                resolve(reason);
                this.removeListener('leave-reply', handler);
            };
            this.addListener('leave-reply', handler);
        });
    }
    mapToObj(map) {
        if (!map) {
            return {};
        }
        const obj = {};
        map.forEach((value, key) => {
            obj[key] = value;
        });
        return obj;
    }
    /**
     * send a message to a session/room
     * @date 2021-11-03
     * @param {any} sid:string
     * @param {any} from:string
     * @param {any} to:string
     * @param {any} mineType:string
     * @param {any} data:Map<string
     * @param {any} any>
     * @returns
     */
    async sendMessage(sid, from, to, mineType, data) {
        const request = new room.Request();
        const sendMessage = new room.SendMessageRequest();
        const message = new room.Message();
        message.setFrom(from);
        message.setTo(to);
        const obj = this.mapToObj(data);
        const buffer = Uint8Array.from(JSON.stringify(obj), (c) => c.charCodeAt(0));
        message.setType(mineType);
        message.setPayload(buffer);
        sendMessage.setSid(sid);
        sendMessage.setMessage(message);
        request.setSendmessage(sendMessage);
        this._client.send(request);
    }
    /**
     * close client
     * @date 2021-11-03
     * @returns
     */
    close() {
        this._client.finishSend();
    }
}
